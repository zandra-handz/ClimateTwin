"""
Django settings for root project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

# Local run lines for my own reference --> .\mysqld --initialize-insecure
#                                           .\mysqld --console, 
#                                           D:\CodingSpace\Redis\redis-cli -h 127.0.0.1 -p 6379 ping
#                                           celery -A root worker -l info -E


#for Digital Ocean use --> celery -A root worker --pool=gevent 

from pathlib import Path

from datetime import timedelta
from django.core.management.utils import get_random_secret_key

from decouple import config

import dj_database_url
import os
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

AUTH_USER_MODEL = 'users.BadRainbowzUser'

# Convert to Env Variable
GOOGLE_MAPS_API_KEY = 'AIzaSyBAW09hdzlszciQ4fTiZjfxcVMlEkF5Iqk'
OPEN_MAP_API_KEY = '54a19c0e6cd35fb9f2d1ec6a87f22dba'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-ulk_hius7lv6hv#tm72-+(%^^@0xtz1ze=pzxy$9yil*fo%=!-'
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', get_random_secret_key())


# SET MODE HERE!  *you will also need to switch the demo token in templates/demo file
# make sure requirements.txt is up to date :)
    # pip freeze > requirements.txt
        # if pushing to Digital Oceean, remove this: twisted-iocpsupport==1.0.4

#ALLOWED_HOSTS = ['climatetwin-lzyyd.ondigitalocean.app']
ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')

DEVELOPMENT_MODE = True

if DEVELOPMENT_MODE == True:
    DEBUG = True
    ALLOWED_HOSTS = []

#DEBUG = os.getenv('DEBUG', 'False') == 'True'

#DEBUG = False
    #ALLOWED_HOSTS = ['climatetwin-lzyyd.ondigitalocean.app']
    #DEBUG = config("DEBUG", default=0)
    # Digital Ocean droplet IP:
    #CELERY_BROKER_URL = 'redis://10.108.0.3:6379/0'


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'daphne',
    'django.contrib.staticfiles',
    'channels',
    'django_celery_results',
    'users',
    'climatevisitor',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'corsheaders',
    #must be placed after rest_framework
    'allauth',
    'allauth.account',
    'djoser',
    #'djoser.urls.authtoken',
    'templated_email',
    'drf_yasg',
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


ASGI_APPLICATION = 'root.asgi.application'

CSRF_TRUSTED_ORIGINS = [
    'https://climatetwin-lzyyd.ondigitalocean.app' # adding https ended up being really important
]

CSRF_COOKIE_DOMAIN = [
                      'https://climatetwin-lzyyd.ondigitalocean.app'
]

REDIS_URL = os.environ.get('REDIS_URL')


# Local
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'

#CELERY_RESULT_BACKEND = "django-db"

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('127.0.0.1', 6379)],
        },
    },
}


'''

# Digital Ocean
REDIS_URL_WITH_CERT_OPTION = f'{REDIS_URL}/0?ssl_cert_reqs=CERT_REQUIRED'   
CELERY_BROKER_URL = REDIS_URL_WITH_CERT_OPTION
CELERY_RESULT_BACKEND = REDIS_URL_WITH_CERT_OPTION

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [os.environ.get('REDIS_URL')],
        },
    },
}

'''

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_WORKER_CONCURRENCY = 10 
    

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 300
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',  
            'class': 'logging.StreamHandler',  
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'], 
            'level': 'DEBUG',  
            'propagate': True,
        },
    },
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'root.urls'

#for front-end development
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



'''
username = doadmin
password = AVNS_0B6B9eD5iKeP76zLmNh
host = climatetwindev-do-user-15838008-0.c.db.ondigitalocean.com
port = 25060
database = defaultdb
sslmode = REQUIRED
'''  

from .api_info import info 

SWAGGER_SETTINGS = {
   'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'scheme': 'https'
        }
    },
    'DEFAULT_INFO': info, 
}

REDOC_SETTINGS = {
   'LAZY_RENDERING': False,
}

WSGI_APPLICATION = 'root.wsgi.application'

DJOSER = {
    'USER_ID_FIELD': 'username',
    'SERIALIZERS': {
        'user_create': 'users.serializers.CustomUserCreateSerializer',
    },

    #(Retype is in time out until I figure out why it's overriding my custom user)
    #'USER_CREATE_PASSWORD_RETYPE': True,

    'SEND_CONFIRMATION_EMAIL': True,
    'SEND_ACTIVATION_EMAIL': True,

    #Use custom email:
    'EMAIL': {
        'activation': 'users.email.BadRainbowzActivationEmail',
        'confirmation': 'users.email.ConfirmationEmail',
        'username-reset': 'users.email.UsernameResetEmail',
        'password-reset': 'users.email.PasswordResetEmail',
        #'password_changed_confirmation':
        #'username_changed_confirmation':
    },
    'ACTIVATION_URL': 'users/activate/{uid}/{token}',
    'SEND_CONFIRMATION_EMAIL': True,
    'PASSWORD_RESET_CONFIRM_URL': 'users/password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': 'users/username/reset/confirm/{uid}/{token}',
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    'USERNAME_CHANGED_EMAIL_CONFIRMATION': True,
    'LOGOUT_ON_PASSWORD_CHANGE': True,
}



# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''

# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

#DEVELOPMENT_MODE = os.getenv("DEVELOPMENT_MODE", "False") == "True"


if DEVELOPMENT_MODE is True:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'ClimateTwin',
            'USER': 'root',
            'PASSWORD': 'root123',
            'HOST': '127.0.0.1',
            'PORT': '3306',
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
            }
        }
    }
else:
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'defaultdb',
        'USER': 'doadmin',
        'PASSWORD': 'AVNS_0B6B9eD5iKeP76zLmNh',
        'HOST': 'climatetwindev-do-user-15838008-0.c.db.ondigitalocean.com',
        'PORT': '25060',
    }
}
    '''
elif len(sys.argv) > 0 and sys.argv[1] != 'collectstatic':
    if os.getenv("DATABASE_URL", None) is None:
        raise Exception("DATABASE_URL environment variable not defined")
    DATABASES = {
        "default": dj_database_url.parse(os.environ.get("DATABASE_URL")),
    }




# Use this for DigitalOcean dev deployment if issue with DigitalOcean database environment variable
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'defaultdb',
        'USER': 'doadmin',
        'PASSWORD': 'AVNS_0B6B9eD5iKeP76zLmNh',
        'HOST': 'climatetwindev-do-user-15838008-0.c.db.ondigitalocean.com',
        'PORT': '25060',
    }
}
'''


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / 'staticfiles'
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES' : [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer'
    ],
    
    'DEFAULT_AUTHENTICATION_CLASSES' : [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        
        #'rest_framework.authentication.SessionAuthentication'
    ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=3)
}

# Added this to get Swagger UI to send https requests when running on DigitalOcean
'''
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
'''

AUTHENTICATION_BACKENDS = (
    # ...
    'allauth.account.auth_backends.AuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
)

TEMPLATED_EMAIL_BACKEND = 'templated_email.backends.vanilla_django.TemplateBackend'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'climatetwin@gmail.com'
EMAIL_HOST_PASSWORD = 'isntimickcpnodic'
DEFAULT_FROM_EMAIL = 'climatetwin@gmail.com'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True

