openapi: 3.0.0
info:
  title: ClimateTwin API
  description: API documentation for the ClimateTwin project, a geospatial, 'educational in a crowdsourced way' app that randomly pairs users with a randomly selected location anywhere in the world with a similar climate, finds historical sites or ruins nearby (here's the educational part), and allows users to create 'items' from these places and gift them to other users.<p><p> The belief is that there is a magical connection between two separate places that have similar weather. These places become more accessible and alive, for a brief period of time. Users bring a little of their weather with them, and the API takes note of wind direction/speed clashes, or harmonies, and also returns an interaction profile.<p><p>I opt for a nested loop approach with my location search algorithms because this allows for a wider landscape of potential results and I want the user's experience to be as unique and special as possible, and because the daily limit for each user is five visits. Quality over quantity. This means that return times can vary wildly depending on how lucky the initial search is or isn't. Future versions will improve on this, possibly by breaking away from one approach after a certain amount of time and trying something else.<p><p> I use the Google Maps API and the Open Map weather and street APIs. To make this less costly, I've cut the Google calls down to only what is strictly necessary by redesigning slightly.<p><p>The item building feature is bare-bones; my goal in this version was first) to get a version completed, and second) to lay a foundation that I could build on and experiment with, and that could make my project tangible and understandable to others so that they could build and play around with it too! I also wanted to familiar with the tools I am learning, most of which for the first time. I want to use weather data and wind interaction data to help generate a unique visual component to these items that reflects the connections between the different weather profiles of that day and time. But the scope of THIS idea is more full-stack than back end.<p><p>I have been fascinated by geospatial technology for a long time, and seem to consistently drift toward it. I hadn't meant for this to be my first portfolio project, but the idea wouldn't leave me alone, so here it is. :) Thank you for checking it out!
			
servers:
  - url: http://localhost:8000/

paths:
  description: hi.
  /:
    get:
      summary: Retrieve the index page
      responses:
        '200':
          description: Index page retrieved successfully
    post:
      summary: Method not allowed
      responses:
        '405':
          description: Method not allowed
  /endpoints/:
    get:
      summary: Retrieve the endpoints page
      responses:
        '200':
          description: Endpoints page retrieved successfully
    post:
      summary: Method not allowed
      responses:
        '405':
          description: Method not allowed
  /go/:
    post:
      summary: Create a new ClimateTwinLocation and ClimateTwinDiscoveryLocation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
              example:
                address: "123 Main St"
      responses:
        '200':
          description: ClimateTwinLocation and ClimateTwinDiscoveryLocation created successfully
        '400':
          description: Bad request, address is required
        '401':
          description: Unauthorized, authentication credentials were not provided
        '405':
          description: Method not allowed
  /collect/:
    get:
      summary: Retrieve the latest ClimateTwinExploreDiscoveryLocation and choose an item to collect
      responses:
        '200':
          description: ClimateTwinExploreDiscoveryLocation retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  key_value_pairs:
                    type: object
                    description: The key-value pairs of the retrieved location
                  message:
                    type: string
                    description: Message to select an item and add a note
        '404':
          description: Explore location not found for the user
        '405':
          description: Method not allowed
    post:
      summary: Collect an item from the latest ClimateTwinExploreDiscoveryLocation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                descriptor:
                  type: string
                description:
                  type: string
                item:
                  type: string
                third_data:
                  type: string
              example:
                descriptor: "Ancient"
                description: "Golden artifact"
                item: "artifact_name"
                third_data: "additional data"
      responses:
        '200':
          description: Item collected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Success message
                  choices:
                    type: object
                    description: The key-value pairs of the retrieved location
                  treasure_id:
                    type: integer
                    description: The ID of the collected treasure
        '400':
          description: Bad request, item is required
        '404':
          description: Explore location not found for the user
        '405':
          description: Method not allowed
  /item-choices/:
    get:
      summary: Retrieve the latest ClimateTwinExploreDiscoveryLocation and its choices
      responses:
        '200':
          description: ClimateTwinExploreDiscoveryLocation retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  choices:
                    type: object
                    description: The key-value pairs of the retrieved location
                  message:
                    type: string
                    description: Message to choose one
        '404':
          description: Explore location not found for the user
        '405':
          description: Method not allowed

  /activate/{uid}/{token}:
    get:
      summary: Activate User
      operationId: activation
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No content
  /username/reset/confirm/{uid}/{token}:
    get:
      summary: Reset Username
  /password/reset/confirm/{uid}/{token}:
    get:
      summary: Reset Password
  /treasures/:
    get:
      summary: List Treasures
      responses:
        "200":
          description: OK
    post:
      summary: Create Treasure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Treasure'
      responses:
        "201":
          description: Created
  /treasure/{pk}:
    get:
      summary: Retrieve Treasure
      parameters:
        - name: pk
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
    put:
      summary: Update Treasure
    delete:
      summary: Delete Treasure
  /profile/:
    get:
      summary: List User Profiles
      responses:
        "200":
          description: OK
    post:
      summary: Create User Profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        "201":
          description: Created
  /edit-profile/{pk}:
    get:
      summary: Retrieve User Profile
      parameters:
        - name: pk
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
    put:
      summary: Update User Profile
    delete:
      summary: Delete User Profile
  /settings/:
    get:
      summary: List User Settings
      responses:
        "200":
          description: OK
    post:
      summary: Create User Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        "201":
          description: Created
  /change-settings/{pk}:
    get:
      summary: Retrieve User Settings
      parameters:
        - name: pk
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
    put:
      summary: Update User Settings
    delete:
      summary: Delete User Settings
  /visited-places/:
    get:
      summary: List User Visits
      responses:
        "200":
          description: OK
    post:
      summary: Create User Visit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserVisit'
      responses:
        "201":
          description: Created
  /visited-place/{pk}:
    get:
      summary: Retrieve User Visit
      parameters:
        - name: pk
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
    put:
      summary: Update User Visit
    delete:
      summary: Delete User Visit
  /inbox/items/:
    get:
      summary: List Inbox Items
      responses:
        "200":
          description: OK
  /inbox/item/{pk}/:
    get:
      summary: Retrieve Inbox Item
      parameters:
        - name: pk
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
    put:
      summary: Update Inbox Item
    delete:
      summary: Delete Inbox Item
  /messages/create/:
    post:
      summary: Create Message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        "201":
          description: Created
  /messages/send/:
    post:
      summary: Send Message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: OK
  /message/{pk}/:
    get:
      summary: Retrieve Message
      parameters:
        - name: pk
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
    put:
      summary: Update Message
    delete:
      summary: Delete Message
  /send-friend-request/:
    post:
      summary: Send Friend Request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendRequest'
      responses:
        "201":
          description: Created
  /send-gift-request/:
    post:
      summary: Send Gift Request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftRequest'
      responses:
        "201":
          description: Created
  /friends/:
    get:
      summary: List User Friendships
      responses:
        "200":
          description: OK
  /friend/{pk}:
    get:
      summary: Retrieve User Friendship
      parameters:
        - name: pk
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
    put:
      summary: Update User Friendship
    delete:
      summary: Delete User Friendship
components:
  schemas:
    ClimateTwinLocation:
      type: object
      properties:
        user:
          type: integer
          description: The ID of the user who created the location.
        creation_date:
          type: string
          format: date-time
          description: The date and time when the location was created.
        last_accessed:
          type: string
          format: date-time
          description: The date and time when the location was last accessed.
        name:
          type: string
          description: The name of the location.
        temperature:
          type: number
          description: The temperature at the location.
        description:
          type: string
          description: A description of the location.
        # Add more properties as needed for ClimateTwinLocation
    ClimateTwinDiscoveryLocation:
      type: object
      properties:
        user:
          type: integer
          description: The ID of the user who discovered the location.
        name:
          type: string
          description: The name of the discovery location.
        direction_degree:
          type: number
          description: The degree of direction.
        direction:
          type: string
          description: The direction.
        miles_away:
          type: number
          description: The distance in miles from the discovery location.
        latitude:
          type: number
          description: The latitude of the discovery location.
        longitude:
          type: number
          description: The longitude of the discovery location.
        # Add more properties as needed for ClimateTwinDiscoveryLocation
    ClimateTwinExploreDiscoveryLocation:
      type: object
      properties:
        user:
          type: integer
          description: The ID of the user who explored the discovery location.
        explore_location:
          type: integer
          description: The ID of the discovery location being explored.
        creation_date:
          type: string
          format: date-time
          description: The date and time when the exploration location was created.
        last_accessed:
          type: string
          format: date-time
          description: The date and time when the exploration location was last accessed.
        # Add more properties as needed for ClimateTwinExploreDiscoveryLocation





    Treasure:
      type: object
      properties:
        user:
          type: string
        original_user:
          type: string
        miles_traveled_to_collect:
          type: number
          format: float
        location_name:
          type: string
        found_at_latitude:
          type: number
          format: float
        found_at_longitude:
          type: number
          format: float
        descriptor:
          type: string
        description:
          type: string
        item_name:
          type: string
        item_category:
          type: string
      required:
        - user
        - miles_traveled_to_collect
        - location_name
        - found_at_latitude
        - found_at_longitude
        - descriptor
        - description
        - item_name
        - item_category
    UserProfile:
      type: object
      properties:
        user:
          type: string
        bio:
          type: string
        location:
          type: string
        birth_date:
          type: string
          format: date
      required:
        - user
    UserSettings:
      type: object
      properties:
        user:
          type: string
        setting_name:
          type: string
        setting_value:
          type: string
      required:
        - user
        - setting_name
        - setting_value
    UserVisit:
      type: object
      properties:
        user:
          type: string
        location_name:
          type: string
        visited_at:
          type: string
          format: date-time
      required:
        - user
        - location_name
        - visited_at
    Item:
      type: object
      properties:
        user:
          type: string
        content_object:
          type: object
        is_read:
          type: boolean
        received_at:
          type: string
          format: date-time
      required:
        - user
        - content_object
        - is_read
        - received_at
    Message:
      type: object
      properties:
        sender:
          type: string
        recipient:
          type: string
        content:
          type: string
        sent:
          type: boolean
        sent_at:
          type: string
          format: date-time
      required:
        - sender
        - recipient
        - content
        - sent
        - sent_at
    FriendRequest:
      type: object
      properties:
        sender:
          type: string
        recipient:
          type: string
        message:
          type: string
        is_accepted:
          type: boolean
        is_rejected:
          type: boolean
      required:
        - sender
        - recipient
        - message
    GiftRequest:
      type: object
      properties:
        sender:
          type: string
        recipient:
          type: string
        treasure:
          type: string
        message:
          type: string
        is_accepted:
          type: boolean
        is_rejected:
          type: boolean
      required:
        - sender
        - recipient
        - treasure
        - message
    UserFriendship:
      type: object
      properties:
        user:
          type: string
        friend:
          type: string
        since:
          type: string
          format: date
      required:
        - user
        - friend
        - since

  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication


